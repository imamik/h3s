name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_call:
    inputs:
      fetch-depth:
        required: false
        type: number
        default: 1

permissions:
  contents: read

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.fetch-depth }}
          
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run go vet
        run: go vet ./...

      - uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

  test:
    name: test
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.fetch-depth }}
          
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Set up gotestfmt
        uses: GoTestTools/gotestfmt-action@v2
        with:
          version: v2.0.0

      - name: Test with coverage
        run: |
          set -euo pipefail
          go test -json -race -v -timeout 10m -coverprofile=coverage.txt -covermode=atomic ./... 2>&1 | tee /tmp/gotest.log | gotestfmt

      - name: Upload test log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-log
          path: /tmp/gotest.log
          if-no-files-found: error

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }} 

      - name: Enforce coverage threshold
        run: make coverage-threshold